<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">



<!--namespace:对sql进行分类化管理-->
<mapper namespace="Demo03.UserMapper">

<!--    定义sql片段
    经验：是基于单表来定义sql片段，这样的话sql片段可重用性才高
    一般不包括where标签
-->
    <sql id="query_user">
        <if test="userCustomer != null">
            <if test="userCustomer.password != null and userCustomer.password != ''">
                and password like '%${userCustomer.password}%'
            </if>
            <if test="userCustomer.name != null and userCustomer.name != ''">
                and name like '%${userCustomer.name}%'
            </if>
            <if test="integers != null">
<!-- foreach：数组和list操作
conllections:指定输入对象集合属性
item: 遍历每个对象
open: 开始遍历时拼接串
close: 结束时拼接串
or: 遍历两个对象中需要的串

以下实现：
AND( id = ? or id = ? )
-->
                <foreach collection="integers" item="user_id" open="AND(" close=")" separator="or">
                    id = #{user_id}
                </foreach>
            </if>
        </if>

    </sql>

<!--    id: 标识sql语句,将sql语句封装到mapperStatement中，是statement的id-->
<!--     #{}:表示一个占位符; parameterType: 指定输入类型;resultType: 指定输出的结果类型，将映射一个POJO类-->
<!--    id: 表示接收输入的参数；
    如果输入参数是简单类型#{}中的参数名可以任意
-->

<!--    根据id查询一条记录-->
    <select id="findUserById" parameterType="int" resultType="user">
    select * from user where id = #{id}
    </select>


<!--

${}: 表示拼接字符串将接收到的字符串不加修饰的添加到sql语句中,
可能会引起sql注入；
如果输入参数是简单类型，只能是${value}

-->
<!--    模糊查询-->
    <select id="findUserByName" parameterType="string" resultType="Demo01.User">
        select * from user where name like '%${value}%'
    </select>


<!--

添加用户
#{}：使用POJO的属性名，通过OGNL获取
-->
    <insert id="addUser" parameterType="Demo01.User">
<!--
将插入的数据的主键返回
LAST_INSERT_ID()：获取刚刚插入的数据的主键值，只适用于自增主键
keyProperty：将查询到的主键设置到指定的parameterType中的指定属性中去
order：insert语句执行顺序

相当于触发器
-->
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>


<!--

非自增版本
插入之前执行
    <selectKey keyProperty="id" order="before" resultType="java.lang.String">
                select uuid()
    </selectKey>


-->
        insert into user(name, password, birthday)  value(#{name},#{password},#{birthday})
    </insert>

<!--    删除用户-->
    <delete id="delUser" parameterType="int">
        delete from user where id = #{id}
    </delete>
<!--    更新用户-->
    <update id="updateUser" parameterType="Demo01.User">
        update user set name = #{name},password = #{password},birthday = #{birthday} where id = #{id}
    </update>

<!--    用户信息综合查询
    ${userCustomer.password}: 取出包装类中的属性
-->
    <select id="findUserList" parameterType="Demo04.UserQueryVo" resultType="Demo04.UserCustomer">
        select * from user where password like '%${userCustomer.password}%' and name like '%${userCustomer.name}%'
    </select>

<!--    用户信息的综合查询-->
    <select id="findUserCount" parameterType="Demo04.UserQueryVo" resultType="int">
        select count(*) from user
<!-- 动态sql，自动拼接sql语句-->
    <where>
<!--     where会自动去掉第一个and-->
<!--        <if test="userCustomer != null">-->
<!--            <if test="userCustomer.password != null and userCustomer.password != ''">-->
<!--                and password like '%${userCustomer.password}%'-->
<!--            </if>-->
<!--            <if test="userCustomer.name != null and userCustomer.name != ''">-->
<!--                and name like '%${userCustomer.name}%'-->
<!--            </if>-->
<!--        </if>-->

<!-- 引用sql片段-->
<include refid="query_user"></include>
    </where>

    </select>

    <!--    定义resultMap
    将查询的结果进行映射
    -->
    <resultMap id="userResultMap" type="user">
<!--        定义POJO中的属性对表的列名的映射,唯一标示列id-->
        <id column="id_" property="id"></id>
<!--        对普通列的映射配置-->
        <result column="name_" property="name"></result>
    </resultMap>
<!--    使用resultMap进行输出映射
        resultMap: 指定定义的resultMap的id，如果是在其他文件中要前面要加namespace
-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        select id id_, name name_ from user where id = #{value}
    </select>


</mapper>