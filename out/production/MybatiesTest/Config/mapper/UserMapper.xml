<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Mapper.UserMapper">
<!--

    字段查询

    通过select标签查询数据库，id：标识映射文件中的sql语句
    parameterType：指定输入参数类型

    #{}: 标识一个占位符

    #{id}: id表示接收输入的参数，简单类型可以随便改名字
    resultType：表示输出的类型，一般定义一个pojo类

   -->
    <select id="findUserById" parameterType="int" resultType="User">
        SELECT * FROM User WHERE id = #{id}
    </select>

<!--
     模糊查询


    ${}: 表示拼接字符串，将收到的参数不加修饰直接拼接，

    注意：${}如果使用的简单类型，只能使用value

    危害：可能会引起sql注入


    -->
    <select id="findUserName" parameterType="string" resultType="ClassMap.User">
        select * from User where userName like '%${value}%'
    </select>

<!--
        添加用户
        #{}:的参数为pojo对象的属性值

-->

    <insert id="insertIntoUser" parameterType="ClassMap.User">


        <!-- 将插入数据的主键返回到user对象中
          SELECT LAST_INSERT_ID()：返回刚才插入的数据的主键值
          keyProperty：返回到对象的那个属性
          order：执行顺序

          仅限自增id
          -->

        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>

        INSERT INTO User(userName, birthday, sex, address) VALUE(#{userName},#{date},#{sex},#{address})

        <!--

            使用mysql的uuid()生成主键

        -->
<!--        <selectKey keyProperty="id" order="BEFORE" resultType="String">-->
<!--            SELECT uuid()-->
<!--        </selectKey>-->

<!--        INSERT INTO User(id,userName, birthday, sex, address) VALUE(#{id},#{userName},#{date},#{sex},#{address})-->


    </insert>


<!--    删除用户-->
    <delete id="deleteUser" parameterType="int">
        DELETE FROM User WHERE id = #{id}
    </delete>

<!--    根据id更新用户信息-->

    <update id="updateUserById" parameterType="ClassMap.User">
        UPDATE User SET userName = #{userName},birthday = #{date},sex = #{sex},address = #{address} WHERE id = #{id}
    </update>

</mapper>
